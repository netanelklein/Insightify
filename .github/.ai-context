name: Insightify
description: A Flutter app for analyzing Spotify listening history data.
tech_stack: Flutter, Dart, SQLite
architecture: Provider pattern for state management

## Project Overview

Insightify is a Flutter mobile application that allows users to analyze their Spotify listening data. The app imports user's downloaded Spotify data files (either Extended or Account data) and provides visualizations and statistics about their listening habits, including top artists, tracks, albums, and listening patterns.

## Key Features

- Import and parse Spotify data from JSON files
- View top artists, tracks, and albums based on listening history
- View total streaming time and most streamed days
- Display average listening time per day statistics
- View listening history with sorting options
- Time of day listening pattern visualization
- Dedicated pages for artists and albums with detailed statistics
- Filter data by custom time ranges

## Core Technical Components

1. **Data Models**:
   - StreamHistoryEntry - Represents basic streaming history
   - ExtendedStreamHistoryEntry - Extended data with detailed information
   - StreamHistoryDBEntry - Database representation of streaming history

2. **State Management**:
   - Uses the Provider package for application state management
   - AppState class manages core state like time ranges, loading state, and filtering options

3. **Database**:
   - Uses SQLite through the sqflite package
   - DatabaseHelper manages database operations including querying statistics
   - Stores stream history, artists, and albums information

4. **API Integration**:
   - Connects to Spotify Web API for additional metadata
   - Fetches artist and album information not available in user data

5. **UI Components**:
   - Material design with custom theme
   - Charts and visualizations using fl_chart
   - World map visualization with countries_world_map

## Project Structure

- lib/
  - main.dart - Application entry point
  - app_state.dart - Global state management
  - auth/ - Spotify API authentication
  - src/
    - models/ - Data models
    - screens/ - Main application screens
    - services/ - API services
    - styles/ - Theme and styling
    - utils/ - Helper functions and constants
    - widgets/ - Reusable UI components

## Development Considerations

- The app processes potentially large JSON files
- Performance optimization for data querying is important
- User privacy is maintained by processing all data locally
- Future plans include expanded visualizations and direct Spotify account integration

## Recent Development Work (December 2024)

### ✅ JSON File Upload Fix - COMPLETED
**Problem**: Users couldn't upload their real Spotify data files because the app expected all optional fields to be present
**Solution**: 
- Updated file type detection in both `welcome.dart` and `database_helper.dart`
- Implemented flexible key matching that only requires core essential fields
- Added comprehensive error handling and user feedback
- Successfully tested with 70,773 real user records across 4 files

**Files Modified**:
- `lib/src/screens/welcome.dart` - Enhanced file upload logic and error handling
- `lib/src/utils/database_helper.dart` - Updated database insertion logic
- `.github/copilot-instructions.md` - Added development workflow guidelines
- `.github/.ai-context` - Comprehensive project documentation

**Commits**:
- `fix: improve Spotify JSON file detection for real user data` (4c3ba28)
- `chore: update Flutter build configuration and dependencies` (785e6c3)

## Critical Issues Identified

### ✅ Recently Resolved (December 2024)
1. **JSON File Loading**: ✅ FIXED - Improved Spotify JSON file detection for real user data
   - Updated file type detection to use flexible key matching instead of requiring all optional fields
   - Fixed issue where real Spotify Extended Streaming History files were rejected due to missing optional fields like 'username'
   - Enhanced error handling and user feedback in file upload process
   - Successfully tested with 70k+ records from real user Spotify data files
   - Both welcome.dart and database_helper.dart now use consistent detection logic

### High Priority (Immediate Action Required)
1. **Test Coverage**: Only basic widget test exists - needs comprehensive unit/integration tests
2. **Memory Management**: Large JSON file processing could cause memory issues on low-end devices
3. **API Efficiency**: Spotify API calls noted as inefficient (multiple TODO comments)

### Medium Priority (Phase 1)
1. **Code Organization**: Some TODOs remain unaddressed in codebase
2. **Performance**: No pagination for large datasets in UI components
3. **Proper Logging**: Replace print statements with structured logging

### Development Workflow Recommendations

#### Git Branching Strategy
1. **Main Branch**: Production-ready code only
2. **Dev Branch**: Integration branch for all feature development
3. **Feature Branches**: Individual branches for each feature (e.g., `feature/track-pages`, `feature/search-functionality`)
4. **Hotfix Branches**: For critical bug fixes that need immediate deployment

#### Suggested Branch Naming Convention
- `feature/description` (e.g., `feature/dedicated-track-pages`)
- `bugfix/description` (e.g., `bugfix/json-import-error`)
- `hotfix/description` (e.g., `hotfix/database-crash`)
- `chore/description` (e.g., `chore/update-dependencies`)

#### Development Process
1. Create feature branch from dev
2. Implement feature with tests
3. Code review via pull request
4. Merge to dev branch
5. Integration testing
6. Merge dev to main for releases

## Improvement Roadmap

### Phase 1: Foundation & Stability (Current - Next Month)
**Branch: `dev` → `feature/foundation-improvements`**
- ✅ **Error Handling & Validation**: COMPLETED - Added comprehensive error handling and user feedback for file uploads
- **Test Infrastructure**: Set up testing framework with unit/integration tests
- **Performance Optimization**: Implement pagination and optimize database queries
- **Code Cleanup**: Address existing TODOs and improve API efficiency
- **Proper Logging**: Replace print statements with structured logging framework

### Phase 2: Core Feature Enhancements (1-2 months)
**Branches from `dev`:**
- `feature/dedicated-track-pages`: Detailed view of individual tracks with listening history
- `feature/search-functionality`: Global search across top lists, history, artists, and albums
- `feature/time-visualizations`: Timeline view showing listening evolution over time
- `feature/genre-analysis`: Genre categorization and distribution visualizations

### Phase 3: Technical Improvements (2-3 months)
**Branches from `dev`:**
- `feature/offline-caching`: Local caching of artist and album images
- `feature/data-import-enhancement`: Background processing with validation and progress
- `feature/repository-pattern`: Implement repository pattern for better data abstraction
- `feature/accessibility`: Screen reader support and visual accessibility improvements

### Phase 4: Advanced Features & Integration (3-4 months)
**Branches from `dev`:**
- `feature/spotify-integration`: OAuth authentication and real-time data syncing
- `feature/data-export`: Export analysis results as images or PDFs
- `feature/ui-personalization`: Customizable dashboard and theme options
- `feature/playlist-analysis`: Visualization and cross-analysis of playlist data

### Phase 5: Future Vision (4+ months)
**Branches from `dev`:**
- `feature/social-features`: Friend comparison capabilities (privacy-respecting)
- `feature/ml-integration`: Mood analysis and personalized insights
- `feature/advanced-visualizations`: Interactive charts with animations
- `feature/mobile-optimization`: Platform-specific optimizations

## Technical Debt & Code Quality

### Immediate Actions Needed
1. **Add secrets.dart template**: Create `lib/auth/secrets.dart.template` for new developers
2. **Add input sanitization**: Validate all user inputs and API responses
3. **Create error reporting**: Implement crash reporting for production builds
4. **Add performance monitoring**: Track app performance and memory usage
5. **Test Infrastructure**: Set up comprehensive unit and integration testing

### Code Quality Standards
1. **Documentation**: Add comprehensive code comments and README updates
2. **Linting**: Ensure all code passes Flutter linting rules
3. **Type Safety**: Add explicit types where missing
4. **Constants Management**: Centralize magic numbers and strings
5. **Widget Decomposition**: Break down large widgets into smaller, reusable components
